package org.jetbrains.plugins.scala.lang.typeConformance
package generated

class TypeConformanceExistentialTest extends TypeConformanceTestBase {
  //This class was generated by build script, please don't change this
  override def folderPath: String = super.folderPath + "existential/"

  //todo:
  /*def testBadLowerBound() {doTest()}*/

  //todo:
  /*def testBadLowerBound2() {doTest()}*/

  //todo:
  /*def testBadLowerBoundPrimitive() {doTest()}*/

  def testBadLowerUpper() {doTest()}

  def testBadToExistential() {doTest()}

  def testInnerPlaceHolder() {doTest()}

  def testInnerPlaceholderBack() {doTest()}

  def testLowerBound() {doTest()}

  def testLowerBound2() {doTest()}

  def testLowerBoundAbstract() {doTest()}

  //todo:
  /*def testLowerBoundAbstract2() {doTest()}*/

  def testLowerBoundPrimitive() {doTest()}

  def testLowerBoundsPrimitiveCovariant() {doTest()}

  def testLowerUpperBouns() {doTest()}

  def testSCL2977() {doTest()}

  def testSCL2977B() {doTest()}

  def testToExistential() {doTest()}

  def testToExistentialSimple() {doTest()}

  //SCL-10295
  def testExistentialWithAliasedDesignator() {doTest()}

  def testSCL12127ConformanceFreeze(): Unit = {
    doTest(
      """
        |abstract class Quantity[A <: Quantity[A]] extends Serializable with Ordered[A] {
        |  self: A â‡’
        |}
        |
        |trait Dimension[A <: Quantity[A]]
        |
        |type RQuantity = T forSome {type T <: Quantity[T]}
        |type RDimension = Dimension[_ <: RQuantity]
        |
        |val rq: RQuantity = ???
        |val x: Function[_, _] = rq
        |//false
        |""".stripMargin
    )
  }

  def testSCL13326(): Unit = {doTest()}

  def testSCL13326_1(): Unit = {doTest()}
}